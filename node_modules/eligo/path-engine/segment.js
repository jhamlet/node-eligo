
var utils = require('protean'),
    Keys,
    Segment;

Keys = utils.inherit(Array, {}, {
    constructor: function () {
        Object.defineProperty(this, 'pending', {
            value: false, writable: true
        });
        Keys.superclass.apply(this, arguments);
    }
});

['push', 'pop', 'unshift', 'shift'].
    forEach(function (key) {
        Object.defineProperty(Keys.prototype, key, {
            value: function () {
                this.pending = true;
                return Keys.superproto[key].apply(this, arguments);
            }
        });
    });
    
Segment = utils.classify({
    /**
     * @param {String|Number|Array|Object} [...arg]
     */
    constructor: function () {
        this.reset();
        this.keys.push.apply(this.keys, arguments);
    },
    /**
     * @property {String[]} Segment.keys
     */
    reset: function () {
        (this.keys || (this.keys = new Keys())).length = 0;
        (this._keys || (this._keys = [])).length = 0;
        return this;
    },
    /**
     * @param {Object} src
     */
    get: function (src) {
        var keys = this.keys,
            _keys = this._keys;
        
        if (keys.pending) {
            _keys.length = 0;
            
            _keys.push.apply(_keys, utils.chain(keys).
                map(function (key) {
                    var from, to, by;
                    switch (typeof key) {
                        case 'string':
                        case 'number':
                            return key;
                        case 'object':
                            if (!utils.isArray(key)) {
                                from = key.from || 0;
                                to = key.to + 1;
                                by = key.by || 1;
                                key = utils.range(from, to, by);
                            }
                            return key;
                    }
                }).
                flatten().
                value());
                
            keys.pending = false;
        }
        
        return utils.pick(src, _keys);
    }
});
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = Segment;