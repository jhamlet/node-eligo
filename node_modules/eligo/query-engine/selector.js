
var utils = require('protean'),
    operators = require('./operators'),
    tokens = require('./tokens'),
    selectors = {},
    Selector;
//---------------------------------------------------------------------------
// Selector
//---------------------------------------------------------------------------
Selector = utils.classify({
    constructor: function (attr, op, val) {
        this.attribute = attr;
        this.operator = typeof op === 'function' ? op : operators[op];
        this.value = val;
    },
    test: function (obj) {
        var attr = this.attribute,
            op = this.operator,
            val = this.value,
            isUniversal = obj && attr === '*',
            hasAttr = obj && utils.has(obj, attr),
            valIsAny = hasAttr && (val === '*' || val === undefined || val === null),
            valMatches = hasAttr && op(obj[attr], val);
        
        return !!(isUniversal || valIsAny || valMatches);
    }
}, {
    toString: {
        value: function () {
            return this.source ||
                this.attribute + this.operator.symbol + this.value;
        }
    }
});

Selector.parse = function (scanner) {
    var selector = null,
        start = scanner.pos,
        attr, op, quotes, val, end, source;
    
    if (scanner.scan(tokens.UNIVERSAL)) {
        selector = new Selector('*');
    }
    else if (scanner.scan(tokens.ID)) {
        selector = new Selector(
            scanner.idKey || 'id',
            operators.equals,
            scanner.captures[1]
        );
    }
    else if (scanner.scan(tokens.MEMBER)) {
        selector = new Selector(
            scanner.captures[1],
            operators.equals,
            '*'
        );
    }
    else if (scanner.scan(tokens.TYPE)) {
        selector = new Selector(
            scanner.typeKey || 'type',
            operators.equals,
            scanner.replace(scanner.captures[1])
        );
    }
    else if (scanner.scan(tokens.ATTRIBUTE_START)) {
        attr = scanner.replace(scanner.scan(tokens.IDENTIFIER));
        op = scanner.scan(tokens.OPERATOR) ?
            operators[scanner.captures[1]] :
            operators.equals;
        quotes = scanner.scan(tokens.QUOTES);
        
        if (quotes) {
            val = scanner.scanUntil(quotes);
            val = val.slice(0, val.length - quotes.length);
            scanner.scan(tokens.ATTRIBUTE_END);
        }
        else {
            val = scanner.scanUntil(tokens.ATTRIBUTE_END);
            val = val.slice(0, val.length - scanner.getMatch().length);
        }
        
        selector = new Selector(attr, op, val || '*');
    }
    
    
    if (selector) {
        end = scanner.pos;
        source = scanner.source.slice(start, end);
        if (utils.has(selectors, source)) {
            selector = selectors[source];
        }
        else {
            selectors[source] = selector;
            selector.source = source;
        }
    }
    
    return selector;
};
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = Selector;
