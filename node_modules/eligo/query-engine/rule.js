
var utils = require('protean'),
    Scanner = require('./scanner'),
    Selector = require('./selector'),
    combinators = require('./combinators'),
    tokens = require('./tokens'),
    LinkedList = utils.LinkedList,
    Rule;

Rule = LinkedList.extend({
    test: function (path) {
        var cursor = this.getDirectedCursor('rev'),
            sel = cursor.item.data,
            result = false;
        
        while (sel) {
            result = typeof sel === 'function' ?
                sel(path, cursor.prev().value) :
                sel.test(path.node);
            
            if (!result) {
                break;
            }
            
            sel = cursor.prev().value;
        }
        
        return result;
    }
});

Rule.parse = function (src, opts) {
    var rule = new Rule(),
        scanner,
        start,
        sel;
    
    if (src instanceof Scanner) {
        scanner = src;
    }
    else {
        scanner = new Scanner(opts);
        scanner.setSource(src);
    }
    
    start = scanner.pos;
    scanner.scan(tokens.WHITESPACE);
    sel = Selector.parse(scanner);
    
    while (sel) {
        rule.push(sel);
        if (scanner.hasTerminated()) {
            break;
        }
        sel = combinators.parse(scanner) || Selector.parse(scanner);
    }
    
    if (!rule.length) {
        throw new Error('Rule must begin with a simple selector');
    }
    
    return rule;
};

//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
Rule.Selector = Selector;
Rule.Combinators = combinators;
module.exports = Rule;