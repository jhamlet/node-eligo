
var utils = require('protean'),
    Selector = require('./selector'),
    combinators = require('./combinators'),
    tokens = require('./tokens'),
    LinkedList = utils.LinkedList,
    Rule;

Rule = LinkedList.extend({
    test: function (path) {
        var node = path.node,
            parentNode = path.parent,
            cursor = this.getDirectedCursor('rev'),
            sel = cursor.value,
            parentSel = cursor.item.prev,
            result = false;
        
        while (sel) {
            result = sel instanceof Selector ?
                sel.test(node) :
                parentSel(path, node);
                
            if (!result) {
                break;
            }
            
            sel = cursor.prev().value;
        }
        
        return result;
    }
});

Rule.parse = function (scanner) {
    var rule = new Rule(),
        start = scanner.pos,
        sel;
    
    scanner.scan(tokens.WHITESPACE);
    sel = Selector.parse(scanner);
    
    while (sel) {
        rule.push(sel);
        if (scanner.hasTerminated()) {
            break;
        }
        sel = combinators.parse(scanner) || Selector.parse(scanner);
    }
    
    if (!rule.length) {
        throw new Error('Rule must begin with a simple selector');
    }
    
    return rule;
};

//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = Rule;