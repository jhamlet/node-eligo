
var utils = require('protean'),
    Scanner = require('./scanner'),
    tokens = require('./tokens'),
    Rule = require('./rule'),
    Query = require('./query'),
    QueryEngine;
//---------------------------------------------------------------------------
// Query Engine
//---------------------------------------------------------------------------
QueryEngine = utils.classify({
    constructor: function QueryEngine (opts) {
        opts = opts || {};
        this.options = opts;
        this.queries = {};
        this.scanner = new Scanner({
            typeKey:     opts.typeKey,
            idKey:       opts.idKey,
            typeAliases: opts.typeAliases
        });
    },
    /**
     * @param {String|Scanner} src The source to parse
     */
    parse: function (src, opts) {
        var queries = this.queries,
            rules = [],
            query = null,
            scanner,
            rule;
        
        if (utils.has(queries, src)) {
            return queries[src];
        }
        
        if (src instanceof Scanner) {
            scanner = src;
        }
        else {
            scanner = this.scanner;
            scanner.setSource(src);
        }
        
        scanner.scan(tokens.WHITESPACE);
        while ((rule = Rule.parse(scanner)) && !scanner.hasTerminated()) {
            rules.push(rule);
            scanner.scan(tokens.GROUP_SEPARATOR);
        }
        
        if (rules.length) {
            query = new Query(rules);
            queries[src] = query;
        }
        
        return query;
    }
});
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
QueryEngine.Query = Query;
QueryEngine.Rule = Rule;
QueryEngine.Selector = Rule.Selector;
QueryEngine.Combinators = Rule.Combinators;
QueryEngine.Operators = Rule.Selector.Operators;
QueryEngine.Scanner = Scanner;
module.exports = QueryEngine;
