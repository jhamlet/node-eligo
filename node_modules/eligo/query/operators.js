var utils = require('protean'),
    REGEX_SPECIALS = /([\[\]\(\)\*\^\$\|])/g;

//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
Object.defineProperties(exports, {
    define: { value: function define (symbol, fn) {
        var token = new RegExp(symbol.replace(REGEX_SPECIALS, '\\$1'));

        this._tokens = null;
        
        this[symbol] = fn;
        this[fn.name] = fn;
        fn.symbol = symbol;
        fn.token = token;
        fn.type = 'operator';
        
        return fn;
    }, enumerable: true },
    
    tokens: { get: function () {
        if (!this._tokens) {
            this._tokens = utils.chain(this).
                keys().
                map(function (key) {
                    var fn;
                    if (key !== 'define' &&
                        key !== 'tokens' &&
                        (fn = exports[key]) &&
                        typeof fn === 'function' &&
                        fn.token instanceof RegExp
                    ) {
                        return fn.token;
                    }
                }).
                compact().
                sort(function (a, b) {
                    return b.source.length - a.source.length;
                }).
                value();
        }
        return this._tokens;
    }, enumerable: true }
});
//---------------------------------------------------------------------------
// Operators
//---------------------------------------------------------------------------
exports.define('=', function equals (left, right) {
    return left === right;
});

exports.define('!=', function notEqual (left, right) {
    return left !== right;
});

exports.define('*=', function contains (left, right) {
    return !!(~left.indexOf(right));
});

exports.define('^=', function begins (left, right) {
    return left.indexOf(right) === 0;
});

exports.define('$=', function ends (left, right) {
    return (left.indexOf(right) + right.length) === left.length;
});

exports.define('~=', function spaceSeparated (left, right) {
    return !!(~left.split(/\s+/).indexOf(right));
});

exports.define('|=', function dashSeparated (left, right) {
    return left === right ||
        left.indexOf(right + '-') === 0;
});
